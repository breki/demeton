module Demeton.Srtm.Types

open Demeton.DemTypes

[<Literal>]
let MaxSrtmLevel = 6

[<StructuredFormatDisplay("{Value}")>]
type SrtmLevel =
    { Value: int }

    static member fromInt i =
        if i < 0 || i > MaxSrtmLevel then
            invalidArg "i" "SRTM level is out of range"
        else
            { Value = i }

let (|Level0|HigherLevel|) (level: SrtmLevel) =
    match level.Value with
    | 0 -> Level0
    | _ -> HigherLevel

[<StructuredFormatDisplay("{Value}")>]
type SrtmLatitude =
    { Value: int }

    static member fromInt i =
        if i < -90 || i > 90 then
            invalidArg "i" "Latitude is out of range"
        else
            { Value = i }

[<StructuredFormatDisplay("{Value}")>]
type SrtmLongitude =
    { Value: int }

    static member fromInt i =
        if i < -179 || i > 180 then
            invalidArg "i" "Longitude is out of range"
        else
            { Value = i }

[<StructuredFormatDisplay("{IdString}")>]
type SrtmTileCoords =
    { Lon: SrtmLongitude
      Lat: SrtmLatitude }

    member this.IdString = $"SrtmTile (%d{this.Lon.Value}/%d{this.Lat.Value})"

/// <summary>
/// Represents a SRTM (Shuttle Radar Topography Mission) tile identifier.
/// </summary>
/// <remarks>
/// A SRTM tile is identified by its level and coordinates (TileX and TileY).
/// The tile level is an extension of the original SRTM format, whose tile
/// files represent level 0, while the higher levels are generated by
/// merging four adjacent tiles of the lower level and downsampling the
/// the height data.
/// </remarks>
[<StructuredFormatDisplay("{IdString}")>]
type SrtmTileId =
    {
        /// <summary>
        /// Represents the level of the SRTM tile. This is of type `SrtmLevel`.
        /// </summary>
        Level: SrtmLevel

        /// <summary>
        /// Represents the X coordinate of the SRTM tile.
        /// This is an integer value which is positive for tiles east of the
        /// Greenwich meridian and negative for tiles west of it.
        /// </summary>
        TileX: int

        /// <summary>
        /// Represents the Y coordinate of the SRTM tile.
        /// This is an integer value which is positive for tile south of the
        /// Equator and negative for tiles north of it.
        /// </summary>
        TileY: int
    }

    member this.IdString = $"%d{this.Level.Value}/%d{this.TileX}/%d{this.TileY}"

/// <summary>
/// In-memory representation of a SRTM tile, identified by its ID and holding
/// its heights array.
/// </summary>
type SrtmTile = SrtmTileId * HeightsArray

type SrtmTileCellCoordsInt = int * int
type SrtmTileCellCoordsFloat = float * float

/// <summary>
/// A function that reads a SRTM tile.
/// </summary>
type SrtmTileReader = SrtmTileId -> HeightsArrayMaybeResult

type SrtmTileName = string
